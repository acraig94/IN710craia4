#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BitAssignmentQueries
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IN700001_201601_CRAIA4")]
	public partial class AssignmentDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblTutor(tblTutor instance);
    partial void UpdatetblTutor(tblTutor instance);
    partial void DeletetblTutor(tblTutor instance);
    partial void InserttblAssignment(tblAssignment instance);
    partial void UpdatetblAssignment(tblAssignment instance);
    partial void DeletetblAssignment(tblAssignment instance);
    partial void InserttblMark(tblMark instance);
    partial void UpdatetblMark(tblMark instance);
    partial void DeletetblMark(tblMark instance);
    partial void InserttblPaper(tblPaper instance);
    partial void UpdatetblPaper(tblPaper instance);
    partial void DeletetblPaper(tblPaper instance);
    #endregion
		
		public AssignmentDbDataContext() : 
				base(global::BitAssignmentQueries.Properties.Settings.Default.IN700001_201601_CRAIA4ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AssignmentDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssignmentDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssignmentDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssignmentDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblTutor> tblTutors
		{
			get
			{
				return this.GetTable<tblTutor>();
			}
		}
		
		public System.Data.Linq.Table<tblAssignment> tblAssignments
		{
			get
			{
				return this.GetTable<tblAssignment>();
			}
		}
		
		public System.Data.Linq.Table<tblMark> tblMarks
		{
			get
			{
				return this.GetTable<tblMark>();
			}
		}
		
		public System.Data.Linq.Table<tblPaper> tblPapers
		{
			get
			{
				return this.GetTable<tblPaper>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblTutor")]
	public partial class tblTutor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tutorID;
		
		private string _name;
		
		private string _email;
		
		private EntitySet<tblPaper> _tblPapers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntutorIDChanging(int value);
    partial void OntutorIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public tblTutor()
		{
			this._tblPapers = new EntitySet<tblPaper>(new Action<tblPaper>(this.attach_tblPapers), new Action<tblPaper>(this.detach_tblPapers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tutorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int tutorID
		{
			get
			{
				return this._tutorID;
			}
			set
			{
				if ((this._tutorID != value))
				{
					this.OntutorIDChanging(value);
					this.SendPropertyChanging();
					this._tutorID = value;
					this.SendPropertyChanged("tutorID");
					this.OntutorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTutor_tblPaper", Storage="_tblPapers", ThisKey="tutorID", OtherKey="paperTutorId")]
		public EntitySet<tblPaper> tblPapers
		{
			get
			{
				return this._tblPapers;
			}
			set
			{
				this._tblPapers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPapers(tblPaper entity)
		{
			this.SendPropertyChanging();
			entity.tblTutor = this;
		}
		
		private void detach_tblPapers(tblPaper entity)
		{
			this.SendPropertyChanging();
			entity.tblTutor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAssignment")]
	public partial class tblAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _assignmentID;
		
		private string _paperCode;
		
		private string _assignmentName;
		
		private System.DateTime _dateDue;
		
		private EntitySet<tblMark> _tblMarks;
		
		private EntityRef<tblPaper> _tblPaper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnassignmentIDChanging(int value);
    partial void OnassignmentIDChanged();
    partial void OnpaperCodeChanging(string value);
    partial void OnpaperCodeChanged();
    partial void OnassignmentNameChanging(string value);
    partial void OnassignmentNameChanged();
    partial void OndateDueChanging(System.DateTime value);
    partial void OndateDueChanged();
    #endregion
		
		public tblAssignment()
		{
			this._tblMarks = new EntitySet<tblMark>(new Action<tblMark>(this.attach_tblMarks), new Action<tblMark>(this.detach_tblMarks));
			this._tblPaper = default(EntityRef<tblPaper>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int assignmentID
		{
			get
			{
				return this._assignmentID;
			}
			set
			{
				if ((this._assignmentID != value))
				{
					this.OnassignmentIDChanging(value);
					this.SendPropertyChanging();
					this._assignmentID = value;
					this.SendPropertyChanged("assignmentID");
					this.OnassignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paperCode", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string paperCode
		{
			get
			{
				return this._paperCode;
			}
			set
			{
				if ((this._paperCode != value))
				{
					if (this._tblPaper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpaperCodeChanging(value);
					this.SendPropertyChanging();
					this._paperCode = value;
					this.SendPropertyChanged("paperCode");
					this.OnpaperCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentName", DbType="Char(40) NOT NULL", CanBeNull=false)]
		public string assignmentName
		{
			get
			{
				return this._assignmentName;
			}
			set
			{
				if ((this._assignmentName != value))
				{
					this.OnassignmentNameChanging(value);
					this.SendPropertyChanging();
					this._assignmentName = value;
					this.SendPropertyChanged("assignmentName");
					this.OnassignmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateDue", DbType="Date NOT NULL")]
		public System.DateTime dateDue
		{
			get
			{
				return this._dateDue;
			}
			set
			{
				if ((this._dateDue != value))
				{
					this.OndateDueChanging(value);
					this.SendPropertyChanging();
					this._dateDue = value;
					this.SendPropertyChanged("dateDue");
					this.OndateDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAssignment_tblMark", Storage="_tblMarks", ThisKey="assignmentID", OtherKey="assignmentID")]
		public EntitySet<tblMark> tblMarks
		{
			get
			{
				return this._tblMarks;
			}
			set
			{
				this._tblMarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPaper_tblAssignment", Storage="_tblPaper", ThisKey="paperCode", OtherKey="paperCode", IsForeignKey=true)]
		public tblPaper tblPaper
		{
			get
			{
				return this._tblPaper.Entity;
			}
			set
			{
				tblPaper previousValue = this._tblPaper.Entity;
				if (((previousValue != value) 
							|| (this._tblPaper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPaper.Entity = null;
						previousValue.tblAssignments.Remove(this);
					}
					this._tblPaper.Entity = value;
					if ((value != null))
					{
						value.tblAssignments.Add(this);
						this._paperCode = value.paperCode;
					}
					else
					{
						this._paperCode = default(string);
					}
					this.SendPropertyChanged("tblPaper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblMarks(tblMark entity)
		{
			this.SendPropertyChanging();
			entity.tblAssignment = this;
		}
		
		private void detach_tblMarks(tblMark entity)
		{
			this.SendPropertyChanging();
			entity.tblAssignment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblMark")]
	public partial class tblMark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _markID;
		
		private int _assignmentID;
		
		private int _grade;
		
		private EntityRef<tblAssignment> _tblAssignment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmarkIDChanging(int value);
    partial void OnmarkIDChanged();
    partial void OnassignmentIDChanging(int value);
    partial void OnassignmentIDChanged();
    partial void OngradeChanging(int value);
    partial void OngradeChanged();
    #endregion
		
		public tblMark()
		{
			this._tblAssignment = default(EntityRef<tblAssignment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_markID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int markID
		{
			get
			{
				return this._markID;
			}
			set
			{
				if ((this._markID != value))
				{
					this.OnmarkIDChanging(value);
					this.SendPropertyChanging();
					this._markID = value;
					this.SendPropertyChanged("markID");
					this.OnmarkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentID", DbType="Int NOT NULL")]
		public int assignmentID
		{
			get
			{
				return this._assignmentID;
			}
			set
			{
				if ((this._assignmentID != value))
				{
					if (this._tblAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassignmentIDChanging(value);
					this.SendPropertyChanging();
					this._assignmentID = value;
					this.SendPropertyChanged("assignmentID");
					this.OnassignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade", DbType="Int NOT NULL")]
		public int grade
		{
			get
			{
				return this._grade;
			}
			set
			{
				if ((this._grade != value))
				{
					this.OngradeChanging(value);
					this.SendPropertyChanging();
					this._grade = value;
					this.SendPropertyChanged("grade");
					this.OngradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAssignment_tblMark", Storage="_tblAssignment", ThisKey="assignmentID", OtherKey="assignmentID", IsForeignKey=true)]
		public tblAssignment tblAssignment
		{
			get
			{
				return this._tblAssignment.Entity;
			}
			set
			{
				tblAssignment previousValue = this._tblAssignment.Entity;
				if (((previousValue != value) 
							|| (this._tblAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAssignment.Entity = null;
						previousValue.tblMarks.Remove(this);
					}
					this._tblAssignment.Entity = value;
					if ((value != null))
					{
						value.tblMarks.Add(this);
						this._assignmentID = value.assignmentID;
					}
					else
					{
						this._assignmentID = default(int);
					}
					this.SendPropertyChanged("tblAssignment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPaper")]
	public partial class tblPaper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _paperCode;
		
		private string _paperName;
		
		private int _paperTutorId;
		
		private EntitySet<tblAssignment> _tblAssignments;
		
		private EntityRef<tblTutor> _tblTutor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpaperCodeChanging(string value);
    partial void OnpaperCodeChanged();
    partial void OnpaperNameChanging(string value);
    partial void OnpaperNameChanged();
    partial void OnpaperTutorIdChanging(int value);
    partial void OnpaperTutorIdChanged();
    #endregion
		
		public tblPaper()
		{
			this._tblAssignments = new EntitySet<tblAssignment>(new Action<tblAssignment>(this.attach_tblAssignments), new Action<tblAssignment>(this.detach_tblAssignments));
			this._tblTutor = default(EntityRef<tblTutor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paperCode", DbType="Char(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string paperCode
		{
			get
			{
				return this._paperCode;
			}
			set
			{
				if ((this._paperCode != value))
				{
					this.OnpaperCodeChanging(value);
					this.SendPropertyChanging();
					this._paperCode = value;
					this.SendPropertyChanged("paperCode");
					this.OnpaperCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paperName", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string paperName
		{
			get
			{
				return this._paperName;
			}
			set
			{
				if ((this._paperName != value))
				{
					this.OnpaperNameChanging(value);
					this.SendPropertyChanging();
					this._paperName = value;
					this.SendPropertyChanged("paperName");
					this.OnpaperNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paperTutorId", DbType="Int NOT NULL")]
		public int paperTutorId
		{
			get
			{
				return this._paperTutorId;
			}
			set
			{
				if ((this._paperTutorId != value))
				{
					if (this._tblTutor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpaperTutorIdChanging(value);
					this.SendPropertyChanging();
					this._paperTutorId = value;
					this.SendPropertyChanged("paperTutorId");
					this.OnpaperTutorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPaper_tblAssignment", Storage="_tblAssignments", ThisKey="paperCode", OtherKey="paperCode")]
		public EntitySet<tblAssignment> tblAssignments
		{
			get
			{
				return this._tblAssignments;
			}
			set
			{
				this._tblAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTutor_tblPaper", Storage="_tblTutor", ThisKey="paperTutorId", OtherKey="tutorID", IsForeignKey=true)]
		public tblTutor tblTutor
		{
			get
			{
				return this._tblTutor.Entity;
			}
			set
			{
				tblTutor previousValue = this._tblTutor.Entity;
				if (((previousValue != value) 
							|| (this._tblTutor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTutor.Entity = null;
						previousValue.tblPapers.Remove(this);
					}
					this._tblTutor.Entity = value;
					if ((value != null))
					{
						value.tblPapers.Add(this);
						this._paperTutorId = value.tutorID;
					}
					else
					{
						this._paperTutorId = default(int);
					}
					this.SendPropertyChanged("tblTutor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAssignments(tblAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblPaper = this;
		}
		
		private void detach_tblAssignments(tblAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblPaper = null;
		}
	}
}
#pragma warning restore 1591
